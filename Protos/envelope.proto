syntax = "proto3";

option csharp_namespace = "MastercardHost.MessageProtos";

message Envelope {
    oneof payload {
        SignalProtocol signal = 1;
        ConfigProtocol config = 2;
        CAPKList capkList = 3;
        REVOPKList revopkList = 4;
    }
}

message SignalProtocol {
    string type = 1;
    repeated SignalDataProtocol data = 2;
}

message SignalDataProtocol{
    string id = 3;
    string value = 4;
}

message ConfigProtocol {
    repeated AID aid = 1;
    TermParam termpar = 2;
}

message AID{
    optional bytes aid = 1;
    optional bytes transType = 2;
    optional bytes appVer = 3;
    optional bytes termFloorLmt = 4;
    optional bytes termRiskManageData = 5;
    optional bytes termType = 6;
    optional bytes tacDefault = 7;
    optional bytes tacOnline = 8;
    optional bytes tacDeny = 9;
    optional bytes clFloorLmt = 10;
    optional bytes clTransLmt = 11;
    optional bytes cvmLmt = 12;
    optional bool supStausCheck = 13;
    optional bool supClTransLmtCheck = 14;
    optional bool supClFloorLmtCheck = 15;
    optional bool supTermFloorLmtCheck = 16;
    optional bool supCVMCheck = 17;
    optional bytes kernelConf = 18;
    optional bytes msdCVMCap_CVMReq = 19;
    optional bytes rcTransLmt_NoCDCVM = 20;
    optional bytes rcTransLmt_CDCVM = 21;
    optional bytes msdCVMCap_NoCVMReq = 22;
    optional bytes mobileSupID = 23;
    optional bytes secueCap = 24;
    optional bytes cvmCap_CVMReq = 25;
    optional bytes cvmCap_NoCVMReq = 26;
    optional bytes addTermCap = 27;
    optional bytes termCap = 28;
    optional bytes kernelID = 29;
}

message TermParam{
    optional bytes acquirerID = 1;
    optional bytes ifdSN = 2;
    optional bytes merchanCateCode = 3;
    optional bytes merchanID = 4;
    optional bytes merchanName = 5;
    optional bytes termCountryCode = 6;
    optional bytes termID = 7;
    optional bytes merchanCustData = 8;
    optional bytes transCurrCode = 9;
    optional bytes transCurrExp = 10;
    optional bytes ttq = 11;
    optional bytes transCateCode = 12;
    optional bytes defualtUDOL = 13;
    optional bytes dsACType = 14;
    optional bytes dsInputCard = 15;
    optional bytes dsInputTerm = 16;
    optional bytes dsODSInfo = 17;
    optional bytes dsODSInfoRd = 18;
    optional bytes dsODSTerm = 19;              //DF63
    optional bytes dsvnTerm = 20;               //DF810D
    optional bytes kernelID = 21;
    optional bytes msdAppVer = 22;
    optional bytes maxLifeTornLog = 23;
    optional bytes maxNumberTornLog = 24;
    optional bytes securCap = 25;
    optional bytes proceed2FirFlg = 26;      //DF8110
    optional bytes envelop1 = 27;           //9F70
    optional bytes envelop2 = 28;           //9F71
    optional bytes envelop3 = 29;           //9F72
    optional bytes envelop4 = 30;           //9F73
    optional bytes envelop5 = 31;           //9F74
    optional bytes tagsToRead = 32;           //DF8112
    optional bytes propTag = 33;
    optional bytes poiInfo = 34;
    optional bytes proprietaryTag = 35;      //DF830A
    optional bytes emptyTagList = 36;
    optional bytes notPresentTagList = 37;
    optional bytes cardDataInputCap = 38;
    optional bytes rrpMinGrace = 39;         //DF8132
    optional bytes rrpMaxGrace = 40;         //DF8133
    optional bytes rrpExceptCAPDU = 41;      //DF8134
    optional bytes rrpExceptRAPDU = 42;      //DF8135
    optional bytes rrpAccuracyThreshold = 43;   //DF8136
    optional bytes dsReqOperaID = 44;           //9F5C
    optional bytes unProtectEnvelope1 = 45;      //9F75
    optional bytes unProtectEnvelope2 = 46;      //9F76
    optional bytes unProtectEnvelope3 = 47;      //9F77
    optional bytes unProtectEnvelope4 = 48;      //9F78
    optional bytes unProtectEnvelope5 = 49;      //9F79
    optional bytes tagsToWriteBeforeGAC = 50;    //FF8102
}

message CAPKList {
    bool isFinish = 1;
    repeated CAPK capk = 2;
}

message CAPK {
  bytes rid = 1;
  bytes index = 2;
  bytes exponent = 3;
  bytes modul = 4;
  bytes checksum = 5;
  bytes expdate = 6;
  bytes hashind = 7;
  bytes arithind = 8;
}

message REVOPKList{
  repeated REVOPK revopk = 1;
}

message REVOPK {
  bytes rid = 1;
  bytes index = 2;
  bytes csn = 3;
}
